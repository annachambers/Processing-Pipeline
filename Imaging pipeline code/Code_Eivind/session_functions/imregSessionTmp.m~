function [ ] = imregSessionTmp( sessionID, options )
%imregSession Register images from a session
%   imregSession(sessionID, options) performs image registration to correct
%   for movement artifacts and rotation of images from a session
%
%   Options is a struct with following fields:
%       - rotate (default is true)      :   Rotate images
%       - rigid (default is true)       :   Rigid image registration
%       - nonrigid (default is false)   :   Non-rigid image registration (NoRMCorre)
%
%   Assumes that available imaging channels are red, green or both. If both
%   are present, it runs motion correction on red channel and applies
%   results to green channel.

% Todo: load raw images does not work for prairieimages.

% Settings
if nargin < 2 || isempty(options)
    options.rotate = true;
    options.rigid = true;
    options.nonrigid = false;
end

warning('off', 'MATLAB:mir_warning_maybe_uninitialized_temporary')
warning('off', 'MATLAB:maxNumCompThreads:Deprecated')

sessionFolder = getSessionFolder(sessionID);

% Get number of blocks for this session + channels recorded
sessionInfo = loadSessionInfo(sessionID);
imagingInfo = loadImagingMetadata(sessionID);

% Skip the 60 first frames if images are from the Prairie Scope. TODO load this as variabl
acquisitionSoftware = imagingInfo.microscope;
switch acquisitionSoftware
    case 'Prairie'
        firstFrame = 60;
    case 'SciScan'
        firstFrame = 1;
end

% Sort channels so that red comes first. (Sort by color and flip : red, green)
ch_unsorted = cat(1, imagingInfo.channelColor(:)', num2cell(imagingInfo.channels));
ch_sorted = fliplr(sortrows(ch_unsorted.', 1)');

for i = 1:imagingInfo.nCh
    
    ch = ch_sorted{2, i};

    for block = 1:sessionInfo.nBlocks

        disp(['Starting image registration for session ', sessionID, ', block ', num2str(block)])
        
        angles = loadLabviewData(sessionID, block, 'angles');
        rotating = loadLabviewData(sessionID, block, 'rotating');

        % Load delay of stage positions in relation to images.
        try
            load(fullfile(sessionFolder, 'imreg_variables', [sessionID, '_stagePositionDelay.mat']))
        catch
            stagePositionDelay = 0;
        end
        
        % Change angles according to the stage position delay
        if stagePositionDelay > 0
            angles = angles(stagePositionDelay+1:end);
        elseif stagePositionDelay < 0
            error('Stage position delay is negative...');
        end
        
        % Find number of overlapping pairs of images and angles
        nAngles = length(angles) - 1;
        nImages = imagingInfo.nFrames - 1;
        nSamples = min([nAngles, nImages]);

        % Calcium recordings might be very long. Process recording in smaller chunks
        chunkSize = 5000;
                
        % Define first indices for each chunk
        lastFrame = nSamples;
        initFrames = firstFrame:chunkSize:lastFrame; 
                
        % Loop through each chunk
        chunk = 0;
        for c = initFrames;
            
            chunk = chunk + 1;
            
            % Last chunk will not be full size, calculate its size:
            if c == initFrames(end)
                chunkSize = lastFrame - initFrames(end);
            end
            
            % Set first and last frame number of current chunk
            idx_i = c;
            idx_e = (idx_i - 1) + chunkSize;
            
            % Check if images are registered or rotated from before
            try
                tmp_imArray = loadData('RegisteredImages', sessionID, block, ch, chunk);
                options.rotate = false;
                options.rigid = false;
            catch
                try
                tmp_imArray = loadData('RotatedImages', sessionID, block, ch, chunk);
                options.rotate = false;
                catch
                    % Load raw images from session and block into array.
                    tmp_imArray = loadRawImages(sessionID, block, ch, idx_i, idx_e);
                    orig_size = size(tmp_imArray);
                    options.rotate = true;
                    % TODO Does not work for prairie. Need to implement first and last idx
                end
                
                options.rigid = true;
            end
            
            % Get original size if rotated or aligned images were loaded
            if ~exist('orig_size', 'var')
                dummy_frame = loadRawImages(sessionID, block, ch, 1, 1);
                orig_size = size(dummy_frame);
            end
            
            % Make temporary variable for angles and rotation for current chunk.
            tmp_angles = angles(idx_i:idx_e);
            tmp_rotating = rotating(idx_i:idx_e);
            

            % Rotate images based on stage positions
            if options.rotate
                if strcmp(acquisitionSoftware, 'Prairie'); tmp_angles = -tmp_angles; end

%                 if block == 1 && chunk == 1   % Find whether image rotates off center
%                     %[stack_dx, stack_dy] = findRotationAxis(tmp_imArray, tmp_angles);
%                 end
                
                try
                    load(fullfile(sessionFolder, 'imreg_variables', [sessionID, '_rotationCenterOffset.mat']))
                    stack_dx = rotationCenterOffset(1);
                    stack_dy = rotationCenterOffset(2);
                catch
                    stack_dx = 0;
                    stack_dy = 0;
                end

                % Shift stack if images are not taken on rotation axis.
                tmp_imArray = shiftStack(tmp_imArray, stack_dx, stack_dy);

                % Rotate images and save stack
                tmp_imArray = rotateStack(tmp_imArray, tmp_angles, 0);
                saveData(tmp_imArray, 'RotatedImages', sessionID, block, ch, chunk);
                continue
            end
            
            
            % Run rigid correction, first translation then rotation.
            if options.rigid
                % Run rigid translation correction on a small central part of the stack
                [height, width, ~] = size(tmp_imArray);
                tmp_small = tmp_imArray((-150:150) + round(height/2), (-150:150) + round(width/2), :);
                [~, shifts] = stackregRigid(tmp_small, [], 'NormCorre');
                
                % Save shifts
                saveData(shifts, 'FrameCorrections', sessionID, block, ch, chunk)
                
                % Apply shifts
                tmp_imArray = applyFrameCorrections(tmp_imArray, [], shifts, []);

                tic
                % Run rigid rotation correction on a small central part of the stack
                tmp_small = tmp_imArray((-150:150) + round(height/2), (-150:150) + round(width/2), :);
                [~, rot_offsets] = correctRotationOffsets(double(tmp_small), tmp_rotating);
                
                % Save shifts
                saveData(rot_offsets, 'RotationCorrections', sessionID, block, ch, chunk)
                
                % Apply shifts
                tmp_imArray = applyFrameCorrections(tmp_imArray, rot_offsets, [], []);
                toc
                
            end


            % Run non-rigid correction
            if options.nonrigid

                % Load rigid translation and rotation corrections if they are not in the
                % workspace
                if ~exist('shifts', 'var')
                    shifts = loadData('FrameCorrections', sessionID, block, ch, chunk);
                end
                
                if ~exist('rot_offsets', 'var')
                    rot_offsets = loadData('RotationCorrections', sessionID, block, ch, chunk);
                end
                
                % Create a boolean stack which can be used to set all black pixels (outside 
                % of actual image) to nans.
                maskArray = createCropMask(orig_size, tmp_angles, shifts, rot_offsets);
                
                % Create a reference image using nan mean to avoid cropped edges.
                if block == 1 && chunk == 1
                    ref = createUncroppedReferenceImage(imArray, maskArray);
                elseif ~exist('ref', 'var')
                    ref = imread(fullfile(sessionFolder, 'session_reference_img.tif'));
                    %ref = createUncroppedReferenceImage(imArray, maskArray, ref);
                end
                
                [imArray, ref] = normcorreRotation(imArray, maskArray, tmp_angles, tmp_rotating, ref);

            end
  
            %Save to file.... save chunks and save as bigtiff in the end?

            refImPath = fullfile(sessionFolder, 'session_reference_img.tif');
            % Align all stacks to the first stack of the session
            if chunk == 1
                if ~exist('ref', 'var')
                    imwrite(uint8(ref), refImPath, 'TIFF')
                else
                    imwrite(uint8(ref), refImPath, 'TIFF')
                end
            end
% 
%             else
%                 ref = double(imread(refImPath));
%                 src = mean(tmp_imArray, 3);
% 
%                 % Get displacements using imreg_fft
%                 [~, dx, dy, ~] = imreg_fft(src, ref);
% 
%                 tmp_imArray = shiftStack(tmp_imArray, dx, dy);         
%             end
            
            % TODO:
            % Crop array to original size....

            tmp_imArray =  circularCrop(tmp_imArray);
        
            %saveRegisteredImages(imArray, sessionID, block, ch);
            saveData(tmp_imArray, 'RegisteredImages', sessionID, block, ch, chunk);
        end


    end

    % Stack average and max projections
    alignedAvgStack = fullfile(sessionFolder, ['blocksAVG_', sessionID, '_ch', num2str(ch, '%d'), '.tif']);
    alignedMaxStack = fullfile(sessionFolder, ['blocksMAX_', sessionID, '_ch', num2str(ch, '%d'), '.tif']);

    stackImages(fullfile(sessionFolder, 'preprocessed_data'), alignedAvgStack, ['*AVG*ch', num2str(ch), '*'])
    stackImages(fullfile(sessionFolder, 'preprocessed_data'), alignedMaxStack, ['*MAX*ch', num2str(ch), '*'])

end

warning('on', 'MATLAB:mir_warning_maybe_uninitialized_temporary')

end